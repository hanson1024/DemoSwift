//
//  HCDateViewController.swift
//  hcp_ios
//
//  Created by Hanson on 2018/3/13.
//  Copyright © 2018年 Hanson. All rights reserved.
//

import UIKit

class HCDateViewController: HCBaseViewController {
    
    private var selectDateTipView = UIView()
    
    private var maxDateCount = 60
    private var saleDateCount = 30
    private var salefinded = false
    
    private var dateList = [HCDateModel]()
    
    private let currentDate = Date()
    
    private let dateWeekArray = ["周日","周一","周二","周三","周四","周五","周六"]
    
    internal var date = Date(){
        didSet{
            self.tableView?.reloadData()
        }
    }
    
    // MARK: - lazy loading
    // MARK: - life cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.automaticallyAdjustsScrollViewInsets = false
        
        navItem.title = "日期选择"
        tableView?.register(HCDateViewControllerCell.self, forCellReuseIdentifier: HCDateViewControllerCellIdentifier)
        tableView?.contentInset = UIEdgeInsetsMake(44 + kStatusAndNavBarHeight, 0, 0, 0)
        print("kStatusAndNavBarHeight = \(kStatusAndNavBarHeight)")
        
        settingSelectDateTipView()
        settingNavigationBar()
        
        var count = 0
        var currentDateComponents: DateComponents = dateInfo(date: currentDate)
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd" // 年-月-日
        formatter.timeZone = TimeZone.init(abbreviation: "Asia/Shanghai")
        
        while count < maxDateCount {
            
            if count == 0 {
                
                let totalDays = totalDaysThisMonth(date: currentDate)
                
                count = totalDays - currentDateComponents.day!
                
                for i in currentDateComponents.day!...totalDays{
                    
                    if let month = currentDateComponents.month, let year = currentDateComponents.year {
                        
                        let dateModel = HCDateModel()
                        dateModel.dateString = "\(String(describing: month))月" + "\(i)日"
                        dateModel.dateUrlString = "\(String(describing: year))-" + "\(String(describing: month))-" + "\(i)"
                        
                        let newDate = formatter.date(from: "\(String(describing: year))-\(String(describing: month))-\(i)")
                        
                        if salefinded == false{
                            findStarSaleDay(date: newDate!, model: dateModel)
                        }
                        
                        dateModel.dateWeekString = weekDayThisDay(date: newDate!)
                        
                        dateList.append(dateModel)
                        
                    }
                }
                
                count == 0 ? count = 1 : ()
                
            }else{
                
                
                var nextDate:Date?
               
                if currentDateComponents.month == 12 {
                    
                    let nextYear = currentDateComponents.year! + 1
                        
                    nextDate = formatter.date(from: "\(nextYear)-\(1)-\(1)")
                    
                }else{
                    
                    let year = currentDateComponents.year!
                    let nextMonth = currentDateComponents.month! + 1
                        
                    nextDate = formatter.date(from: "\(year)-\(nextMonth)-\(1)")
                }
                
                
                let nextDateComponents: DateComponents = dateInfo(date: nextDate!)
                
                let nextTotalDays = totalDaysThisMonth(date: nextDate!)
                
                if maxDateCount - count < nextTotalDays {
                    
                    for i in 1...maxDateCount - count{
                        
                        if let month = nextDateComponents.month, let year = nextDateComponents.year  {
                            
                            let dateModel = HCDateModel()
                            dateModel.dateString = "\(String(describing: month))月" + "\(i)日"
                            dateModel.dateUrlString = "\(String(describing: year))-\(String(describing: month))-" + "\(i)"
                            
                            let newDate = formatter.date(from: "\(String(describing: year))-\(String(describing: month))-\(i)")
                            
                            dateModel.dateWeekString = weekDayThisDay(date: newDate!)
                            
                            if salefinded == false{
                                findStarSaleDay(date: newDate!, model: dateModel)
                            }
                            
                            dateList.append(dateModel)
                            
                        }
                    }
                    
                    count = maxDateCount
                    
                }else{
                    
                    for i in 1...nextTotalDays{
                        
                        if let month = nextDateComponents.month, let year = nextDateComponents.year  {
                            
                            let dateModel = HCDateModel()
                            dateModel.dateString = "\(String(describing: month))月" + "\(i)日"
                            dateModel.dateUrlString = "\(String(describing: year))-\(String(describing: month))-" + "\(i)"
                            
                            let newDate = formatter.date(from: "\(String(describing: year))-\(String(describing: month))-\(i)")
                            
                            dateModel.dateWeekString = weekDayThisDay(date: newDate!)
                            
                            if salefinded == false{
                                findStarSaleDay(date: newDate!, model: dateModel)
                            }
                            
                            dateList.append(dateModel)
                            
                        }
                    }
                    count += nextTotalDays
                    
                }
                
                currentDateComponents = nextDateComponents
            }
            
            
        }
        
        tableView?.reloadData()
        // Do any additional setup after loading the view.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - private methods
    
    func settingNavigationBar() {
        
        navItem.rightBarButtonItem = UIBarButtonItem(customView: UIButton(title: "确定", fontSize: 15))
    }
    
    func settingSelectDateTipView() {
        
        selectDateTipView.backgroundColor = UIColor.init(hexString: "#F2F2F2")
        selectDateTipView.frame = CGRect(x: 0, y: kStatusAndNavBarHeight, width: kScreenWidth, height: 44)
        
        view.addSubview(selectDateTipView)
    }
    
    internal func dateInfo(date: Date) -> (DateComponents) {
        let components = Calendar.current.dateComponents([Calendar.Component.year, Calendar.Component.month, Calendar.Component.day,Calendar.Component.weekday], from: date)

        return components
    }
    
    func weekDayThisDay(date: Date) -> String {
        
        if NSCalendar.current.isDateInToday(date) {
            return "今天"
        }else if NSCalendar.current.isDateInTomorrow(date){
            return "明天"
        }else{
            let components = dateInfo(date: date)
            
            return dateWeekArray[components.weekday! - 1]
        }
        
    }
    
    func findStarSaleDay(date: Date,model: HCDateModel) -> Void {
        
        let dateComponentsFormatter = DateComponentsFormatter()
        dateComponentsFormatter.allowedUnits = [.day]
        
        if let autoFormattedDifference = dateComponentsFormatter.string(from: currentDate, to: date) {
            
            let string: String = autoFormattedDifference.replacingOccurrences(of: "天", with: "")
            
            if let count = Int(string) {
                
                if count + 2 == saleDateCount {
                    
                    salefinded = true
                    model.showStarSale = true
                    
                    print(count + 1)
                }
            }
        }
        
    }
    
    internal func firstWeekDayThisMonth(date: Date) -> (Int) {
        var components = Calendar.current.dateComponents([Calendar.Component.year, Calendar.Component.month, Calendar.Component.day], from: date)
        components.day = 1
        let firstDayOfMonthDate = Calendar.current.date(from: components)
        let firstWeekDay = Calendar.current.ordinality(of: Calendar.Component.weekday, in: Calendar.Component.weekOfMonth, for: firstDayOfMonthDate!)
        return firstWeekDay!
    }
    
    internal func totalDaysThisMonth(date: Date) -> (Int) {
        let totalDaysThisMonth:Range = Calendar.current.range(of: Calendar.Component.day, in: Calendar.Component.month, for: date)!
        return totalDaysThisMonth.count
    }
    
    
    
    // MARK: - Delegate
    // MARK: - tableViewDelegate
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dateList.count;
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: HCDateViewControllerCellIdentifier, for: indexPath) as! HCDateViewControllerCell
        let model = dateList[indexPath.row]
        
        cell.dateModel = model
        
        return cell
    }
    
    // MARK: - event response

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */

}
