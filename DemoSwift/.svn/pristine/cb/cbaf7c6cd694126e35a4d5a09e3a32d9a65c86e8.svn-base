//
//  HCBaseViewController.swift
//  hcp_ios
//
//  Created by Hanson on 2018/3/7.
//  Copyright © 2018年 Hanson. All rights reserved.
//

import UIKit

class HCBaseViewController: UIViewController {
    
    //表格视图
    var tableView: UITableView?
    //上拉刷新的标记
    var isPullup = false
    
    //自定义导航条
    lazy var navgationBar : UINavigationBar = UINavigationBar(frame: CGRect(x: 0, y: kStatusBarHeight, width: kScreenWidth, height: 44))
    lazy var statusBar: UIView = UIView.init(frame: CGRect(x: 0, y: 0, width: kScreenWidth, height: kStatusBarHeight))
    
    lazy var navItem = UINavigationItem()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        settingBaseInformation()
    }
    
    deinit {
        //注销通知
        NotificationCenter.default.removeObserver(self)
    }
    
    override var title : String? {
        didSet{
            navItem.title = title
        }
    }
    //加载数据 具体由子类负责
    func loadData() {
        
    }
}




// MARK: - 设置界面
extension HCBaseViewController {
    
    fileprivate func settingBaseInformation() {
        view.backgroundColor = UIColor.white
        //取消自动缩进 - 如果隐藏了导航栏 会缩进20点
        automaticallyAdjustsScrollViewInsets = false
        
        steupNavigationBar()
        steupTableView()
    }
    
    /// 设置表格视图-- 用户登录之后执行
    //子类重写方法 因为子类不需要关心用户登录之前的逻辑
    func steupTableView() {
        
        tableView = UITableView(frame: view.bounds, style: .plain)
        view.insertSubview(tableView!, belowSubview: navgationBar)
        
        tableView?.delegate = self
        tableView?.dataSource = self
        //设置内容缩进
        tableView?.contentInset = UIEdgeInsets(top: navgationBar.bounds.height, left: 0, bottom: tabBarController?.tabBar.bounds.height ?? 49, right: 0)
        //设置导航条的缩进
        tableView?.scrollIndicatorInsets  = tableView!.contentInset
        
        
    }
    
    ///设置导航栏
    private func steupNavigationBar() {
        view.addSubview(navgationBar)
        //将item 设置给barnj
        navgationBar.items = [navItem]
        //设置 navBar 的渲染颜色
        navgationBar.barTintColor = UIColor.init(hexString: "0xF6F6F6")
        //设置navBar 的标题字体颜色
        navgationBar.titleTextAttributes = [NSAttributedStringKey.foregroundColor:UIColor.darkGray]
        //设置系统按钮的文字渲染颜色  只对系统.plain 的方法有效
        navgationBar.tintColor = UIColor.orange
        
        view.addSubview(statusBar)
        statusBar.backgroundColor = navgationBar.barTintColor
    }
}

// MARK: - 代理方法
extension HCBaseViewController:UITableViewDelegate,UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 0
    }
    
    //基类只是准备方法 子类负责具体实现  子类发数据源方法不需要super
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        //只是保证没有语法错误
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 10
    }
    
    //在显示最后一行的时候 做上拉刷新
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        // 判断indexpath 是否最后一行
        let row = indexPath.row
        //取最后一组
        let section = tableView.numberOfSections - 1
        if row < 0 || section < 0 {
            return
        }
        //最后一组的行数
        let count = tableView.numberOfRows(inSection: section)
        //如果是最后一行 同时没有开始上拉刷新
        if (row == count - 1) && !isPullup {
            print("上拉刷新")
            isPullup = true
            //开始刷新
            loadData()
            
        }
    }

}
